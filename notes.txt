General : To make entries to system variables
search for edit system variables
click on "edit system variables" - This will openup a window called system variables
select the Advanced Tab
click on "environment variable"
In the second window click on "New"
Enter variable name as "JAVA_HOME"
value as "C:\Program Files\Java\jdk1.8.0_121"
restart command prompt

1. JDK 8 and install
JAVA_HOME=C:\Program Files\Java\jdk1.8.0_121
echo %JAVA_HOME%
java -version

2. Install jenkins
https://jenkins.io/
http://mirrors.jenkins.io/war-stable/latest/jenkins.war

3. java -jar jenkins.war --httpPort=8090

Create a project
-------------------------------
Click on new item on jenkins dashboard
enter a name for your project (project1)
select freestyle project
click OK
This will take you to the project configuration page
click save
your project project1 will show up on the home page of jenkins/dashboard


Configure Git
-----------------------------
download and install git ( if not already installed)
https://git-scm.com/download/win

dashboard -> manage jenkins -> Global tool configuration of jenkins

Git 
Add Git
Name : git
Executable path : git.exe

Configure project to download code from Git
-------------------------------------------
Click on project -> click on configure
under source code management
select git
https://github.com/AdityaSP/devopsdemo

Save

Trigger a build
------------------------------------------
click on build now - build #1 will start and should go to success

Check the output
-------------------------------
click on the build number and it will show you the output

Build Schedule
-------------------------------
Click on the project 
Select Build periodically
Enter this as build schedule
H/15 * * * *
click on save

Configuring a build step
-------------------------------
Maven project
http://www-us.apache.org/dist/maven/maven-3/3.5.3/binaries/apache-maven-3.5.3-bin.zip

1. MAVEN_HOME=D:\sw\apache-maven-3.3.9
2. update your path entries
edit PATH variable and add ;D:\sw\apache-maven-3.3.9\bin


Configuring Maven
------------------------------
(Hint: Similar to Git configuration)

Configuring a build step
------------------------------
dashboard -> click on project1 -> configure -> under build heading -> Add a build step -> Invoke top level maven targets
Maven : maven that you have configured in the above step

Goals: install

Save

Configuring a post build action
------------------------------
1. dashboard -> click on project1 -> configure -> postbuild actions -> archive artifacts
2. Files to archive target/*jar 
3. (optional) select do not fail build
4. Save
5. trigger a build
6. Observe : *.jar in ~/.jenkins/jobs/Project1/<jobnumber>/archive/


Configure email notification
----------------------------

1. dashboard -> manage jenkins -> configure system -> scroll down to email notifications
smtp server : smtp.gmail.com
use smtp authentication : yes
username : sp.aditya@gmail.com
password : asljkdfl;ajsdpoqiwerkljasdf
use ssl : yes
port : 465
reply to : sp.aditya@gmail.com


Publish error reports
-------------------------


select test configuration
send test email after entering a reciepient address



Email notification on a failed build
-------------------------------------
dashboard-> Project1-> configure-> postbuild action -> email notification
recipient : <email id>

To manufacture an error : change install in build step to installasldfjq

Save
trigger a build
check your email


Extended email notification (global level -> it affects all projects)
------------------------------------
dashboard -> manage jenkins -> configure system -> scroll down to extended email notifications
smtp settings same as before
default recipients : <email id>
NB : Triggers : select Always


Extended Email notification configure on your project
-------------------------------------
dashboard-> Project1-> configure-> postbuild action -> Editable email notification
project recipient list : sp.aditya@gmail.com
Attach build log : yes

Save
trigger a build
check your email

Publish test results
------------------------
1. dashboard -> click on project1 -> configure -> postbuild actions -> Publish JUnit test ersult reports
2. target/surefire-reports/*.xml

Say yes to "Do not fail the build..."
Save
trigger a couple of builds
refresh your project dashboard and then you will see test result trends




PIPELINE PROJECT


Create a project
-------------------------------
Click on new item on jenkins dashboard
enter a name for your project (projectpipeline)
select pipeline
click OK
This will take you to the project configuration page
click save
your project project1 will show up on the home page of jenkins/dashboard

Enter my pipeline script
------------------------
dashboard -> click on project pipeline -> configure 
Scroll down to go to pipeline script
Choose Pipeline script

node {
   stage('Source checkout') {
      git 'https://github.com/AdityaSP/devopsdemo'
   }
}


Save the project
trigger  a build


Usage of a tool in pipeline scripts
-----------------------------------
dashboard -> click on project pipeline -> configure 
Scroll down to go to pipeline script
Choose Pipeline script


node {
   def mvnHome
   stage('Source checkout') { // for display purposes
      git 'https://github.com/AdityaSP/devopsdemo'
      mvnHome = tool 'maven'
   }
   stage('Build') {
         bat(/"${mvnHome}\bin\mvn" install/)
    }
}

Save the project
trigger  a build

Archiving the artifacts
------------------------

node {
   def mvnHome
   stage('Source checkout') { // for display purposes
      git 'https://github.com/AdityaSP/devopsdemo'
      mvnHome = tool 'maven'
   }
   stage('Build') {
         bat(/"${mvnHome}\bin\mvn" install/)
    }
    stage('Archive'){
        archiveArtifacts allowEmptyArchive: true, artifacts: 'target/*.jar'
    }
}


Configure a node
-----------------------------
dashboard -> Manage Jenkins -> Manage node - > new node
Screen 1
name of the node : localnode
select Permanent node

Screen 2
# executors : 2
Remote Directory : E:/remoteapr12
(click on the ? and download agent.jar and place it in E:\\agentjar folder)
Launch command : java -jar E:\\agentjar\\agent.jar

Save
Refresh the page you should see your node running

Enable concurrent runs
---------------------------------
dashboard -> Porject1-> configure
select Execute concurrent builds if necessary
Save
Come back to dash board
trigger multiple builds of the same project . In this case Project 1


Sticky project runs - run a project on particular type of nodes
-----------------------------------
dashboard -> Porject1-> configure
select Restrict where this project can be run
label : localnode

Save
Trigger multiple builds and you observe that only 2 parallel (concurrent builds) are possible because our node has only two executors


